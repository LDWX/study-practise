1. Commenting:

  A. Each file should begin with a comment that explains what the file contains:

        /**
         * This file contains styles for tab groups.
         * Tab groups are intended to only contain elements with the tab class.
         */

  B. Properties that might be confusing should have a comment explaining them:

        .tab-group-flush {
            display: block;
            margin-left: -12px; /* removes parent container's padding */
            margin-right: -12px; /* removes parent container's padding */
        }

2. Formatting:

  A. Rulesets should: 

      - appear on multiple lines when multiple properties are present
      - contain declarations that are indented 4 spaces

        /* Incorrect */
        .selector {
        property1: value;
        property2: value;
        }

        /* Incorrect */
        .selector {
                property1: value;
                property2: value;
        }

        /* Incorrect */
        .selector { property1: value; property2: value; }

        /* Correct */
        .selector {
            property1: value;
            property2: value;
        }

  B. Declarations should:

      - contain one space after the colon
      - always end with a semicolon

        /* Incorrect */
        .selector {
            property1:value;
        }

        /* Incorrect */
        .selector {
            property1: value
        }

        /* Incorrect */
        .selector {
            property1 : value;
        }

        /* Correct */
        .selector {
            property1: value;
        }

  C. Rulesets may appear on one line only when multiple rulesets are 
     styling background-position differently

        /* Incorrect */
        .selector1 { property1: value; property2: value; }
        .selector2 { property1: value; property2: value; }
        .selector3 { property1: value; property2: value; }

        /* Correct */
        .selector1 { background-position: 0 0;     }
        .selector2 { background-position: 0 -10px; }
        .selector3 { background-position: 0 -10px; }

  D. Trailing whitespace must be removed from rulesets and declarations

2. Selector Naming Conventions:

  A. Only lowercase letters may be used

        /* Incorrect */
        .SeleCtor {}
        .SELECTOR {}

        /* Correct */
        .selector {}

  B. Selectors with multiple words must use spinal-case

        /* Incorrect: */
        .selectorWithMultipleWords {}
        .SELECTORWITHMULTIPLEWORDS {}
        .selector_with_multiple_words {}
        .selectorWith_multiple-words {}

        /* Correct */
        .selector-with-multiple-words {}

  C. IDs must not be used to style elements; use classes instead

        /* Incorrect */
        #element-to-style {}

        /* Correct */
        .element-to-style {}

  D. Style changes made by JavaScript (regardless of the framework used) 
     must be done by adding or removing CSS classes

        /**
         * Incorrect an element's style is changed via the style
         * attribute in JavaScript
         */
        $('.js-menu-item').on('click', function (e) {
            $(this).css('background-color', '#FFFF00');
        });

        /**
         * Correct: an element's style is changed by adding a class with
         * JavaScript
         */
        $('.js-menu-item').on('click', function (e) {
            $(this).addClass('highlighted');
        });

  E. Classes and IDs that are used as JavaScript selectors must be prefixed 
     with js- and must not be present in a stylesheet

        /**
         * Incorrect: styles prepended with js- should not be in a
         * stylesheet
         */
        #js-element-only-used-by-javascript {
            background-color: #FFFF00;
        }

        /**
         * Incorrect: an element is selected in JavaScript by a class
         * used to style the element
         */
        $('.menu-item').on('click', function () {
            $(this).addClass('highlighted');
        });

        /**
         * Correct: an element is selected in JavaScript by a selector
         * intended for JavaScript
         */
        $('.js-menu-item').on('click', function () {
            $(this).addClass('highlighted');
        });

  F. Meaningful class names must be used

        /* Incorrect: Class name is meaningless */
        .r {}

        /* Correct: Class name is meaningful and descriptive */
        .resident {}

  G. Class names must describe what is being styled as opposed to how it
  is being styled

        /* Incorrect: describes style being applied */
        .float-left-bold {}

        /* Correct: describes what is being styled */
        .sidebar-important {}

3. Properties

  A. Shorthand properties may only be used for border, margin, and padding

        /* Incorrect: shorthand is used for font property */
        .selector {
            border: 1px solid #000000;
            font: 12px Arial, sans-serif;
        }

        /* Correct: shorthand is only used for border property */
        .selector {
            border: 1px solid #000000;
            font-family: Arial, sans-serif;
            font-size: 12px;
        }

  B. Properties must be alphabetized

        /* Incorrect */
        .selector {
            padding: 12px;
            margin: 24px;   
            border: 1px solid #000000;  
        }

        /* Correct */
        .selector {
            border: 1px solid #000000;  
            margin: 24px;
            padding: 12px;  
        }

  C. Properties with a value of 0 must omit the units

        /* Incorrect */
        .selector {
            padding: 0px;
            margin: 0px;    
            border: 1px solid #000000;  
        }

        /* Correct */
        .selector {
            border: 1px solid #000000;  
            margin: 0;
            padding: 0;
        }   
